var-assign-expr     ::= mut <identifier> = <val-expr>
val-expr            ::= <identifier>[.<identifier>[<fun-call-args>]]*
                      | <identifier><fun-call-args>
                      | <num-expr> | <bool-expr>
                      | <string-expr> | <char-expr>
                      | <subscript-expr> | <sizeofexpr>
                      | <op><val-expr> | <val-expr> <op> <val-expr>
                      | <ternary-expr>
return-expr         ::= return <val-expr>
if-expr             ::= if <val-expr> <compound-expr>
while-expr          ::= while <val-expr> <compound-expr>
for-loop-expr       ::= for <expr>; <val-expr>; <expr> <compound-expr>
fun-call-args       ::= ([<label>:] <val-expr>,*)
compound-expr       ::= { [ <if-expr> | <while-expr> 
                          | <var-assgin-expr> | <return-expr>
                          | <val-expr> ];* }
fun-decl            ::= fn <name>([<name> [internal-name]: <typename>,]*): <typename> <compound-expr>
field-decl          ::= mut <name>: <identifier>;
type-decl           ::= typedef <identifier> { [<field-decl> | fun-decl]* }                          
num-char            ::= 0-9 | _
num-expr            ::= <num-char>*
hex-char            ::= a-f | A-F | 0-9
char-content        ::= ascii character | \x<hex-char>+
char-expr           ::= ' <char-content> '
bool-expr           ::= true | false
subscript-expr      ::= <val-expr> [ <val-expr> ]
id-char             ::= a-z | A-Z | <num-char>
identifier          ::= <id-char>*
ternary-expr        ::= <val-expr> ? <val-expr> : <val-expr>
sizeof-expr         ::= sizeof <val-expr>
