let nested = (1, (2, 3), (4, 5, (6, 7)))
let large = (3, 4, 5, true, "String to test", true, 3, nested)

extension Bool {
    fn str() -> *Int8 {
        return self ? "true" : "false"
    }
}

fn foo(tuple: (Int, Bool)) -> (Int, Bool) {
    printf("(%d, %s)\n", tuple.0, tuple.1 ? "true" : "false")
    return (tuple.0 + 1, !tuple.1)
}

fn main() {
    printf("large: (%d, %d, %d, %s, \"%s\", %s, %d)\n", large.0, large.1, large.2, large.3.str(), large.4, large.5.str(), large.6)
    printf("nested: (%d, (%d, %d), (%d, %d, (%d, %d)))\n", nested)
}